#!/usr/bin/env python3
#-*- coding: utf-8 -*-

'''
Get information from the results of the analysis
of the malware benchmark, these results are from
time of analysis and memory consumed during the
analysis.

Analyzed folder: malware-benchmark-results_second_version
'''

import os
from os.path import basename
from database_connector import DatabaseConnector
from scanf import scanf

database_connector = DatabaseConnector()

def retrieve_variables_from_line(line: str) -> tuple:
    '''
    Use scanf function in order to retrieve the different variables
    from the line of the CSV scanned.

    :param line: line to analyze with scanf and extract data.
    :return: tuple with variables of different data types
    '''
    if 'Kunai-Recursive' in line:
        return scanf("%s:%s;cmd:%s %s;real:%f:user:%f;sys:%f;memory:%d;cpu:%d%;exit-code:%d;size:%d", line)
    else:
        return scanf("%s;%s;cmd:%s %s;real:%f:user:%f;sys:%f;memory:%d;cpu:%d%;exit-code:%d;size:%d", line)

def retrieve_variables_from_line_with_analysis_time(line: str) -> tuple:
    '''
    Use scanf function in order to retrieve the different variables
    from the line of the CSV scanned.

    :param line: line to analyze with scanf and extract data.
    :return: tuple with variables of different data types
    '''
    if 'Kunai-Recursive' in line:
        return scanf("%s:%s;analysis_time:%f;cmd:%s %s;real:%f:user:%f;sys:%f;memory:%d;cpu:%d%;exit-code:%d;size:%d", line)
    else:
        return scanf("%s;%s;analysis_time:%f;cmd:%s %s;real:%f:user:%f;sys:%f;memory:%d;cpu:%d%;exit-code:%d;size:%d", line)

def extract_variables_analysis_line(lines: list) -> dict:
    '''
    Extract all the variables from a list of string lines
    with the information from the analysis, create a dictionary
    with the results from the analysis, and finish it.

    :param lines: list of lines from the CSV.
    :return: dictionary with the benchmark results.
    '''

    results = {'benchmark': dict()}

    tool = None
    file = None
    analysis_time = 0.0
    analysis_command = None
    path_command = None
    real_time = 0.0
    user_time = 0.0
    sys_time = 0.0
    memory = 0
    cpu = 0
    exit_code = 0
    size = 0

    for line in lines:
        line = line.strip()

        if 'analysis_time' in line:
            (tool, file, analysis_time, analysis_command, path_command, real_time, user_time, sys_time,
                memory, cpu, exit_code, size) = retrieve_variables_from_line_with_analysis_time(line)
        else:
            (tool, file, analysis_command, path_command, real_time, user_time, sys_time,
                memory, cpu, exit_code, size) = retrieve_variables_from_line(line)

        analyzed_file_name = basename(file).replace(".", "_")

        if analyzed_file_name not in results['benchmark']:
            results['benchmark'][analyzed_file_name] = dict()

        if tool not in results['benchmark'][analyzed_file_name].keys():
            results['benchmark'][analyzed_file_name][tool] = {
                'analysis_time':analysis_time,
                'real_time': real_time,
                'user_time': user_time,
                'sys_time': sys_time,
                'memory': memory,
                'exit_code': exit_code,
                'file_size': size
            }

    return results

def main():
    global database_connector

    database_connector.config()

    for root, dirs, files in os.walk('./malware-benchmark-results/'):
        for filename in files:
            path = os.path.join(root, filename)
            with open(path, 'r') as f_:
                lines = f_.readlines()
                result = extract_variables_analysis_line(lines)
                md5 = filename.split('.')[0]
                malware_family = os.path.basename(root)
                database_connector.insert_malware_analysis_apk(md5, malware_family, result)

if __name__ == '__main__':
    main()

                